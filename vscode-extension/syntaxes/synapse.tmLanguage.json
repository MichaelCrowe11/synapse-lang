{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Synapse",
  "patterns": [
    {"include": "#comments"},
    {"include": "#keywords"},
    {"include": "#strings"},
    {"include": "#numbers"},
    {"include": "#operators"},
    {"include": "#functions"},
    {"include": "#variables"},
    {"include": "#types"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.synapse",
          "match": "//.*$"
        },
        {
          "name": "comment.block.synapse",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.synapse",
          "match": "\\b(hypothesis|experiment|parallel|branch|stream|reason|chain|premise|derive|conclude|uncertain|observe|propagate|constrain|evolve|pipeline|stage|fork|path|merge|explore|try|fallback|accept|reject|symbolic|let|solve|prove|synthesize|validate|assume|predict|setup|procedure|analysis|from|when|through|where|for|all|exists|in|with|at|synchronize|async|await|channel)\\b"
        },
        {
          "name": "keyword.control.flow.synapse",
          "match": "\\b(if|else|elif|while|for|break|continue|return)\\b"
        },
        {
          "name": "keyword.operator.logical.synapse",
          "match": "\\b(and|or|not|true|false)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.synapse",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.synapse",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.synapse",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.synapse",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.uncertainty.synapse",
          "match": "\\b\\d+(\\.\\d+)?\\s*±\\s*\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.numeric.float.synapse",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.synapse",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.uncertainty.synapse",
          "match": "±"
        },
        {
          "name": "keyword.operator.arrow.synapse",
          "match": "=>|<-|->"
        },
        {
          "name": "keyword.operator.comparison.synapse",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.synapse",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.arithmetic.synapse",
          "match": "\\+|\\-|\\*|\\/|\\^|%"
        },
        {
          "name": "keyword.operator.assignment.synapse",
          "match": "="
        },
        {
          "name": "keyword.operator.tilde.synapse",
          "match": "~"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.synapse",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.name.synapse",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.synapse",
          "match": "\\b(Real|Complex|Quantum|Symbol|Tensor|Graph|Dynamic|structure|theory|channel)\\b"
        }
      ]
    }
  },
  "scopeName": "source.synapse"
}